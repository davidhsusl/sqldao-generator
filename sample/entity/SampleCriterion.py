from dataclasses import dataclass, field
from datetime import datetime

from sample.entity.Sample import Sample
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.entity.Page import Page

"""This file is generated by sqldao-generator; don't modify anything. If you need to do it, you should create another class."""


@dataclass
class SampleCriterion:
    page = Page()
    filters: list[any] = field(default_factory=list)
    values: dict[any] = field(default_factory=dict)

    @classmethod
    def builder(cls):
        return cls()

    def build(self):
        return Criterion(page=self.page, filters=self.filters, values=self.values)

    def order_by(self, value: str):
        self.page.order_by = value
        return self

    def page_no(self, value: int):
        self.page.page_no = value
        return self

    def page_size(self, value: int):
        self.page.page_size = value
        return self

    def set_col_datetime(self, value: datetime | str):
        self.values['col_datetime'] = value
        return self

    def set_col_double(self, value: float):
        self.values['col_double'] = value
        return self

    def set_col_int(self, value: int):
        self.values['col_int'] = value
        return self

    def set_col_text(self, value: str):
        self.values['col_text'] = value
        return self

    def set_col_tinyint(self, value: int):
        self.values['col_tinyint'] = value
        return self

    def set_col_var(self, value: str):
        self.values['col_var'] = value
        return self

    def set_id(self, value: int):
        self.values['id'] = value
        return self

    def col_datetime(self, value: datetime | str = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_datetime == value)
        return self

    def col_datetime_in(self, value: list[datetime | str] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_datetime.in_(value))
        return self

    def col_datetime_start(self, value: datetime | str = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_datetime >= value)
        return self

    def col_datetime_end(self, value: datetime | str = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_datetime <= value)
        return self

    def col_double(self, value: float = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_double == value)
        return self

    def col_double_in(self, value: list[float] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_double.in_(value))
        return self

    def col_double_gte(self, value: float = None):
        if value is not None:
            self.filters.append(Sample.col_double >= value)
        return self

    def col_double_lte(self, value: float = None):
        if value is not None:
            self.filters.append(Sample.col_double <= value)
        return self

    def col_int(self, value: int = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_int == value)
        return self

    def col_int_in(self, value: list[int] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_int.in_(value))
        return self

    def col_int_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_int >= value)
        return self

    def col_int_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_int <= value)
        return self

    def col_text(self, value: str = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_text == value)
        return self

    def col_text_in(self, value: list[str] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_text.in_(value))
        return self

    def col_text_like(self, value: str = None, left='%', right='%'):
        if value is not None and value != '':
            self.filters.append(Sample.col_text.like(f"{left}{value}{right}"))
        return self

    def col_tinyint(self, value: int = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_tinyint == value)
        return self

    def col_tinyint_in(self, value: list[int] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_tinyint.in_(value))
        return self

    def col_tinyint_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_tinyint >= value)
        return self

    def col_tinyint_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_tinyint <= value)
        return self

    def col_var(self, value: str = None):
        if value is not None and value != '':
            self.filters.append(Sample.col_var == value)
        return self

    def col_var_in(self, value: list[str] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.col_var.in_(value))
        return self

    def col_var_like(self, value: str = None, left='%', right='%'):
        if value is not None and value != '':
            self.filters.append(Sample.col_var.like(f"{left}{value}{right}"))
        return self

    def id(self, value: int = None):
        if value is not None and value != '':
            self.filters.append(Sample.id == value)
        return self

    def id_in(self, value: list[int] = None):
        if value is not None and len(value) > 0:
            self.filters.append(Sample.id.in_(value))
        return self

    def id_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.id >= value)
        return self

    def id_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.id <= value)
        return self
