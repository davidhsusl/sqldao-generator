from sample.dao.BaseDao import BaseDao
from sample.entity.Sample import Sample
from sample.entity.SampleCriterion import SampleCriterion
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.common.transaction_holder import transactional, get_transaction

"""This file is generated by sqldao-generator; don't modify anything. If you need to do it, you should create another class."""


class SampleDao(BaseDao):

    def select_sample(self, condition: SampleCriterion) -> tuple[list[Sample], int]:
        criterion = Criterion.builder().entity(Sample).condition(condition) \
            .equals_filter().in_filter().gte_filter().lte_filter().date_filter().build().to_list()
        with self.Session() as session:
            orders = condition.order_by.split(' ')
            query = session.query(Sample).filter(*criterion).order_by(eval(f"Sample.{orders[0]}.{orders[1]}()"))
            total = None
            if condition.page is not None and condition.page_size is not None:
                query = query.offset((condition.page - 1) * condition.page_size).limit(condition.page_size)
                total = session.query(Sample).filter(*criterion).count()
            entities = query.all()
        return entities, len(entities) if total is None else total

    @transactional
    def insert_sample(self, sample: SampleCriterion):
        session = get_transaction()
        entity = Sample(
                col_datetime=sample.col_datetime, col_double=sample.col_double, col_int=sample.col_int, 
                col_text=sample.col_text, col_tinyint=sample.col_tinyint, col_var=sample.col_var)
        session.add(entity)
        session.flush()
        session.refresh(entity)
        session.expunge(entity)
        return entity

    @transactional
    def update_sample(self, condition: SampleCriterion, sample: SampleCriterion):
        session = get_transaction()
        criterion = Criterion.builder().entity(Sample).condition(condition) \
            .equals_filter().in_filter().gte_filter().lte_filter().date_filter().build().to_list()
        entities = session.query(Sample).filter(*criterion).all()
        for entity in entities:
            self.set_not_none(entity, sample, 
                              'col_datetime', 'col_double', 'col_int', 
                              'col_text', 'col_tinyint', 'col_var')

    @transactional
    def delete_sample(self, condition: SampleCriterion):
        session = get_transaction()
        criterion = Criterion.builder().entity(Sample).condition(condition) \
            .equals_filter().in_filter().gte_filter().lte_filter().date_filter().build().to_list()
        entities = session.query(Sample).filter(*criterion).all()
        for entity in entities:
            session.delete(entity)


sample_dao = SampleDao()
