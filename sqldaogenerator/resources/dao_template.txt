from {base_dao_package}.{base_dao_name} import {base_dao_name}
from {entity_package}.{entity_name} import {entity_name}E, {entity_name}
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.common.transaction_holder import transactional, get_transaction

"""This file is generated by sqldao-generator; don't modify anything. If you need to do it, you should create another class."""


class {entity_name}Dao({base_dao_name}):

    def select_{entity_variable}(self, condition: {entity_name}) -> tuple[list[{entity_name}E], int]:
        criterion = Criterion.builder() \
            .equals_filter(condition.equals_filters()).in_filter(condition.in_filters()).gte_filter(condition.gte_filters()) \
            .lte_filter(condition.lte_filters()).date_filter(condition.date_filters()).build()
        with self.Session() as session:
            orders = condition.order_by.split(' ')
            query = session.query({entity_name}E).filter(*criterion.to_list()).order_by(eval(f"{entity_name}E.{{orders[0]}}.{{orders[1]}}()"))
            total = None
            if condition.page is not None and condition.page_size is not None:
                query = query.offset((condition.page - 1) * condition.page_size).limit(condition.page_size)
                total = session.query({entity_name}E).filter(*criterion).count()
            entities = query.all()
        return entities, len(entities) if total is None else total

    @transactional
    def insert_{entity_variable}(self, {entity_variable}: {entity_name}):
        session = get_transaction()
        entity = {entity_name}E({insert_columns})
        session.add(entity)
        session.flush()
        session.refresh(entity)
        session.expunge(entity)
        return entity

    @transactional
    def update_{entity_variable}(self, condition: {entity_name}, {entity_variable}: {entity_name}):
        session = get_transaction()
        criterion = Criterion.builder() \
            .equals_filter(condition.equals_filters()).in_filter(condition.in_filters()).gte_filter(condition.gte_filters()) \
            .lte_filter(condition.lte_filters()).date_filter(condition.date_filters()).build()
        entities = session.query({entity_name}E).filter(*criterion.to_list()).all()
        for entity in entities:
            self.set_not_none(entity, {entity_variable}, {update_columns})

    @transactional
    def delete_{entity_variable}(self, condition: {entity_name}):
        session = get_transaction()
        criterion = Criterion.builder() \
            .equals_filter(condition.equals_filters()).in_filter(condition.in_filters()).gte_filter(condition.gte_filters()) \
            .lte_filter(condition.lte_filters()).date_filter(condition.date_filters()).build()
        entities = session.query({entity_name}E).filter(*criterion.to_list()).all()
        for entity in entities:
            session.delete(entity)


{entity_variable}_dao = {entity_name}Dao()
