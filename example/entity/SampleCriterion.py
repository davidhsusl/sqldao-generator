"""
This file is generated by sqldao-generator; don't modify anything.
If you need to do it, you should create another class.
"""
from dataclasses import dataclass, field
from datetime import datetime

from sqlalchemy import BinaryExpression

from example.entity.Sample import Sample
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.entity.Page import Page


@dataclass
class SampleCriterion:
    page = Page()
    filters: list[BinaryExpression] = field(default_factory=list)
    values: dict[str, any] = field(default_factory=dict)

    @classmethod
    def builder(cls):
        return cls()

    def build(self):
        return Criterion(page=self.page, filters=self.filters, values=self.values)

    def order_by(self, value: str):
        self.page.order_by = value
        return self

    def page_no(self, value: int):
        self.page.page_no = value
        return self

    def page_size(self, value: int):
        self.page.page_size = value
        return self

    def set_id(self, value: int):
        self.values['id'] = value
        return self

    def set_col_var(self, value: str):
        self.values['col_var'] = value
        return self

    def set_col_text(self, value: str):
        self.values['col_text'] = value
        return self

    def set_col_tinyint(self, value: int):
        self.values['col_tinyint'] = value
        return self

    def set_col_int(self, value: int):
        self.values['col_int'] = value
        return self

    def set_col_double(self, value: float):
        self.values['col_double'] = value
        return self

    def set_col_datetime(self, value: datetime | str):
        self.values['col_datetime'] = value
        return self

    def id(self, value: int = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.id == value)
            else:
                self.filters.append(Sample.id != value)
        return self

    def id_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.id.is_(None))
        else:
            self.filters.append(Sample.id.isnot(None))
        return self

    def id_in(self, value: list[int] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.id.in_(value))
            else:
                self.filters.append(Sample.id.notin_(value))
        return self

    def id_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.id >= value)
        return self

    def id_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.id <= value)
        return self

    def col_var(self, value: str = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_var == value)
            else:
                self.filters.append(Sample.col_var != value)
        return self

    def col_var_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_var.is_(None))
        else:
            self.filters.append(Sample.col_var.isnot(None))
        return self

    def col_var_in(self, value: list[str] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_var.in_(value))
            else:
                self.filters.append(Sample.col_var.notin_(value))
        return self

    def col_var_like(self, value: str = None, reverse=False, left='%', right='%'):
        if value is not None and value != '':
            if not reverse:
                self.filters.append(Sample.col_var.like(f"{left}{value}{right}"))
            else:
                self.filters.append(Sample.col_var.not_like(f"{left}{value}{right}"))
        return self

    def col_text(self, value: str = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_text == value)
            else:
                self.filters.append(Sample.col_text != value)
        return self

    def col_text_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_text.is_(None))
        else:
            self.filters.append(Sample.col_text.isnot(None))
        return self

    def col_text_in(self, value: list[str] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_text.in_(value))
            else:
                self.filters.append(Sample.col_text.notin_(value))
        return self

    def col_text_like(self, value: str = None, reverse=False, left='%', right='%'):
        if value is not None and value != '':
            if not reverse:
                self.filters.append(Sample.col_text.like(f"{left}{value}{right}"))
            else:
                self.filters.append(Sample.col_text.not_like(f"{left}{value}{right}"))
        return self

    def col_tinyint(self, value: int = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_tinyint == value)
            else:
                self.filters.append(Sample.col_tinyint != value)
        return self

    def col_tinyint_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_tinyint.is_(None))
        else:
            self.filters.append(Sample.col_tinyint.isnot(None))
        return self

    def col_tinyint_in(self, value: list[int] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_tinyint.in_(value))
            else:
                self.filters.append(Sample.col_tinyint.notin_(value))
        return self

    def col_tinyint_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_tinyint >= value)
        return self

    def col_tinyint_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_tinyint <= value)
        return self

    def col_int(self, value: int = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_int == value)
            else:
                self.filters.append(Sample.col_int != value)
        return self

    def col_int_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_int.is_(None))
        else:
            self.filters.append(Sample.col_int.isnot(None))
        return self

    def col_int_in(self, value: list[int] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_int.in_(value))
            else:
                self.filters.append(Sample.col_int.notin_(value))
        return self

    def col_int_gte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_int >= value)
        return self

    def col_int_lte(self, value: int = None):
        if value is not None:
            self.filters.append(Sample.col_int <= value)
        return self

    def col_double(self, value: float = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_double == value)
            else:
                self.filters.append(Sample.col_double != value)
        return self

    def col_double_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_double.is_(None))
        else:
            self.filters.append(Sample.col_double.isnot(None))
        return self

    def col_double_in(self, value: list[float] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_double.in_(value))
            else:
                self.filters.append(Sample.col_double.notin_(value))
        return self

    def col_double_gte(self, value: float = None):
        if value is not None:
            self.filters.append(Sample.col_double >= value)
        return self

    def col_double_lte(self, value: float = None):
        if value is not None:
            self.filters.append(Sample.col_double <= value)
        return self

    def col_datetime(self, value: datetime | str = None, reverse=False):
        if value is not None:
            if not reverse:
                self.filters.append(Sample.col_datetime == value)
            else:
                self.filters.append(Sample.col_datetime != value)
        return self

    def col_datetime_null(self, reverse=False):
        if not reverse:
            self.filters.append(Sample.col_datetime.is_(None))
        else:
            self.filters.append(Sample.col_datetime.isnot(None))
        return self

    def col_datetime_in(self, value: list[datetime | str] = None, reverse=False):
        if value is not None and len(value) > 0:
            if not reverse:
                self.filters.append(Sample.col_datetime.in_(value))
            else:
                self.filters.append(Sample.col_datetime.notin_(value))
        return self

    def col_datetime_start(self, value: datetime | str = None):
        if value is not None:
            self.filters.append(Sample.col_datetime >= value)
        return self

    def col_datetime_end(self, value: datetime | str = None):
        if value is not None:
            self.filters.append(Sample.col_datetime <= value)
        return self
