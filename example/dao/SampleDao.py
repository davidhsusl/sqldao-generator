"""This file is generated by sqldao-generator; don't modify anything. If you need to do it, you should create another class."""
from example.dao.BaseDao import BaseDao
from example.entity.Sample import Sample
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.common.transaction_holder import transactional, get_transaction


class SampleDao(BaseDao):

    def select_sample(self, criterion: Criterion) -> tuple[list[Sample], int]:
        with self.Session() as session:
            criterion_list = criterion.to_list()
            page = criterion.page
            orders = page.order_by.split(' ')
            query = session.query(Sample).filter(*criterion_list).order_by(eval(f"Sample.{orders[0]}.{orders[1]}()"))
            total = None
            if page.page_no is not None and page.page_size is not None:
                query = query.offset((page.page_no - 1) * page.page_size).limit(page.page_size)
                total = session.query(Sample).filter(*criterion_list).count()
            entities = query.all()
        return entities, len(entities) if total is None else total

    @transactional
    def insert_sample(self, criterion: Criterion):
        session = get_transaction()
        entity = Sample(**criterion.values)
        session.add(entity)
        session.flush()
        session.refresh(entity)
        session.expunge(entity)
        return entity

    @transactional
    def update_sample(self, criterion: Criterion):
        criterion_list = criterion.to_list()
        assert criterion_list is not None and len(criterion_list) > 0, 'Must have at least one condition in the update.'
        session = get_transaction()
        entities = session.query(Sample).filter(*criterion_list).all()
        for entity in entities:
            for key, value in criterion.items():
                exec(f"entity.{key}=value")

    @transactional
    def delete_sample(self, criterion: Criterion):
        criterion_list = criterion.to_list()
        assert criterion_list is not None and len(criterion_list) > 0, 'Must have at least one condition in the delete.'
        session = get_transaction()
        entities = session.query(Sample).filter(*criterion_list).all()
        for entity in entities:
            session.delete(entity)


sample_dao = SampleDao()
